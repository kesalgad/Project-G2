At this point I already have my GUI which I developed using QT Designer 6.4, my GUI consists of 6 buttons / fuctions. 

1. "inicio": Is mainly informational where the user is informed about the program's functionality.
2. "inventarios": It's got an upper form to register new items with one field to enter the code of the product, another field to enter brief description of the product, a field to enter how many units of a given product enter the warehouse, and a field to specify which warehouse is this being entered to, lastly there's a button to submit and register the items.
In this same page, but in the lower section there's a small form to check stock with a field to specify which product code we're inquiring about, a field to enter the warehouse's code and then a field where it'll be printed how many items there are as per our previous choices, finally there's a button to execute the query.
3. "bodegas": In this module there's just a small form with a field to enter a warehouse code, another field for province, another one for city, another one for the name of Warehouse Manager, and a final field to enter the phone number in a given warehouse, lastly there's a button to submit and create the warehouse in the system.
4. "distribuidores": This page has a small form with a field to enter the company's name, another to enter the business ID, another one to enter the region in which they operate, another field to enter their address, a field to record a phone number, and lastly a field to record an e-mail, at the bottom of the screen there's a button to submit and create the distributor's profile.
5. "entregas": This page is used to record deliveries so that we can later calculate products registered in different warehouses minus deliveries made of said product and obtain our stock for that given product. It has a field to enter a product code, then a field to specify to which distributor the product was delivered, a field to specify how many units of that given product were delivered and a field to enter the date of the delivery. At the bottom there's a button to submit and record the delivery.
6. "reportes": This page has a single button to generate a TXT report containing the inventory delivered to each distributor.

So far I only have the python code with my UI which I exported from QT Designer and a main.py with the following code:

import sys
from ui import *
from sqlite3 import *
from PySide6 import QtCore, QtWidgets, QtGui
from DataManager import DataManager



class AppInventario(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_SistemaGestionInventarios()
        self.ui.setupUi(self)
        self.show()

        # Create an instance of the DataManager class
        self.dm = DataManager('inventarios.json', 'bodegas.json', 'distribuidores.json', 'entregas.json')

        # Mapeo de los botones a las páginas *"lambda" es una función anónima
        self.ui.pushButton_inicio.clicked.connect(lambda: self.ui.stackedWidget.setCurrentIndex(0))
        self.ui.pushButton_inv.clicked.connect(lambda: self.ui.stackedWidget.setCurrentIndex(1))
        self.ui.pushButton_bod.clicked.connect(lambda: self.ui.stackedWidget.setCurrentIndex(2))
        self.ui.pushButton_dist.clicked.connect(lambda: self.ui.stackedWidget.setCurrentIndex(3))
        self.ui.pushButton_ent.clicked.connect(lambda: self.ui.stackedWidget.setCurrentIndex(4))
        self.ui.pushButton_rep.clicked.connect(lambda: self.ui.stackedWidget.setCurrentIndex(5))

        # Use the DataManager to read data
        inventarios_data = self.dm.read_inventarios()
        bodegas_data = self.dm.read_bodegas()
        distribuidores_data = self.dm.read_distribuidores()
        entregas_data = self.dm.read_entregas()

        # Do something with the data
        print(inventarios_data)
        print(bodegas_data)
        print(distribuidores_data)
        print(entregas_data)

        # Use the DataManager to write data
        self.dm.write_inventarios(inventarios_data)
        self.dm.write_bodegas(bodegas_data)
        self.dm.write_distribuidores(distribuidores_data)
        self.dm.write_entregas(entregas_data)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = AppInventario()
    window.show()
    sys.exit(app.exec_())

    I also have a class called DataManager.py to handle (write and read) data persistency through JSON files with the following code:
    class DataManager:
    def __init__(self, inventarios_file, bodegas_file, distribuidores_file, entregas_file):
        self.inventarios_file = inventarios_file
        self.bodegas_file = bodegas_file
        self.distribuidores_file = distribuidores_file
        self.entregas_file = entregas_file

    def read_inventarios(self):
        # implementation of read_inventarios method
        pass

    def write_inventarios(self, data):
        # implementation of write_inventarios method
        pass

    def read_bodegas(self):
        # implementation of read_bodegas method
        pass

    def write_bodegas(self, data):
        # implementation of write_bodegas method
        pass

    def read_distribuidores(self):
        # implementation of read_distribuidores method
        pass

    def write_distribuidores(self, data):
        # implementation of write_distribuidores method
        pass

    def read_entregas(self):
        # implementation of read_entregas method
        pass

    def write_entregas(self, data):
        # implementation of write_entregas method
        pass


I have bodegas.json, distribuidores.json, entregas.json and inventarios.json.

I also have a file called ui.py with the contents obtained from QT Designer, this is the code in it


#####################
#####################

It seems like you have a clear plan for your inventory management system and have made a good start on implementing the GUI. Here are some suggestions for how you could implement the functionality of the program using the classes you've defined:

InventoryItem: You can create an instance of this class for each item in the inventory and store them in a list or dictionary. When a new item is added to the inventory, you can create a new InventoryItem object with the given attributes and add it to the list/dictionary.

Warehouse: Similar to InventoryItem, you can create instances of this class for each warehouse and store them in a list or dictionary. When a new warehouse is added, you can create a new Warehouse object with the given attributes and add it to the list/dictionary.

Distributor: Similar to InventoryItem and Warehouse, you can create instances of this class for each distributor and store them in a list or dictionary. When a new distributor is added, you can create a new Distributor object with the given attributes and add it to the list/dictionary.

Delivery: When a delivery is made, you can create a new Delivery object with the given attributes and add it to a list or database table. To calculate the current inventory for a given item, you can retrieve all the deliveries made for that item and subtract the quantities delivered from the total quantity in the inventory.

InventoryManager: This class can handle the methods for adding/updating/removing items, warehouses, and distributors, as well as making deliveries and generating reports. It can also interact with the DataManager class to store/retrieve data from a database.

For example, you could define a method in the InventoryManager class called add_item which takes in the item attributes as parameters, creates a new InventoryItem object with those attributes, and adds it to the list/dictionary of items.

To implement the functionality of your GUI, you can connect the buttons and input fields to the appropriate methods in the InventoryManager class. For example, when the "submit" button is clicked on the "inventarios" page, you can call the add_item method with the input values from the text fields.

You will also need to interact with a database to store and retrieve data. You can create a DataManager class to handle the interactions with the database. For example, you could define a method in the DataManager class called insert_item which takes in the item attributes as parameters and inserts them into a "items" table in the database. When a new item is added using the GUI, you can call the insert_item method with the input values from the text fields.

I hope this helps you get started on implementing your inventory management system. Let me know if you have any questions or need further assistance.



